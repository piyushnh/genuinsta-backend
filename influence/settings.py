"""
Django settings for influence project.

Generated by 'django-admin startproject' using Django 2.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
from apps.socialAuth.settings import * 

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
TEMPLATE_DIR = os.path.join(BASE_DIR, "templates")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '9oxiw%z+j)!kk(1i-8g*80cd6(50t3v2^v@1i-y)6h#@9o9#ro'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1', 'localhost',]
ROOT_HOST_URL = 'http://localhost:8000'

CORS_ORIGIN_ALLOW_ALL=True

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.gis',

    #django-channels
    'fcm_django',
    'channels',
    'django_eventstream',

    'debug_toolbar',
    'corsheaders',
    'rest_framework',

    'smartfields',
    'guardian',

    #authentication packages
    'rest_framework.authtoken',
    # 'rest_auth',
    # 'allauth',
    # 'allauth.account',
    # 'allauth.socialaccount',
    # 'rest_auth.registration',

     'phonenumber_field',

    'apps.users',
    'apps.friendship',
    'apps.socialAuth',
    'apps.groups',
    'apps.posts',
    'apps.pep',
    'apps.notification',
    'stream_framework',
    

    #Importing App Configs
    # 'apps.posts.apps.PostsConfig',
    # 'apps.friendship.apps.FriendshipConfig'



] 

AUTH_USER_MODEL = 'users.CustomUser'


KEYFILES_DIR = os.path.join(BASE_DIR, 'firebase_keyfiles')
FIREBASE_KEY = 'journal-dev-253621-firebase-adminsdk-vi6is-a4fc0fac6b.json'


MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware', #IMPORTANT to add this above all middleware for CORS to work
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_grip.GripMiddleware',
]

ROOT_URLCONF = 'influence.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATE_DIR],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.request',
                # 'social_django.context_processors.backends',
                # 'social_django.context_processors.login_redirect',
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = (
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # #needed for social authentication
    # 'social_core.backends.google.GoogleOAuth2',
    # 'social_core.backends.facebook.FacebookOAuth2',

    # `allauth` specific authentication methods, such as login by e-mail
    # 'allauth.account.auth_backends.AuthenticationBackend',

    # Required by `django-guardians`
     'guardian.backends.ObjectPermissionBackend',

)



REST_FRAMEWORK = {
    
    'DEFAULT_AUTHENTICATION_CLASSES': (
        #Then, we set the DEFAULT_AUTHENTICATION_CLASSES,
        # which determines which authentication methods the server will try when
        #it receives a request, in descending order
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
        'rest_framework.permissions.IsAuthenticated',

    ),
}

WSGI_APPLICATION = 'influence.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'genuinsta',
        'USER': 'piyushnh',
        'PASSWORD': 'piyush1235',
        'HOST': 'localhost',
        'PORT': '5432',
        # 'OPTIONS': {'charset': 'utf8mb4'},

    }
}


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

# TIME_ZONE = 'Asia/Kolkata'

USE_I18N = True

USE_L10N = True

USE_TZ = True




# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

#necessary for django debug toolbar
INTERNAL_IPS = ['127.0.0.1']

# we whitelist localhost:3000 because that's where frontend will be served
CORS_ORIGIN_WHITELIST = (
         'http://localhost:3000/',
         'http://127.0.0.1:3000',
 )

CORS_ALLOW_CREDENTIALS = True

#authentication related
SITE_ID = 1

# LOGIN_REDIRECT_URL = 'http://localhost:3000/'
# LOGOUT_REDIRECT_URL = '/'

# Custom allauth settings
# Use email as the primary identifier
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_REQUIRED = True



# Eliminate need to provide username, as it's a very old practice
ACCOUNT_USERNAME_REQUIRED = False
OLD_PASSWORD_FIELD_ENABLED = True
USER_MODEL_USERNAME_FIELD = True

JWT_AUTH = {
    # Authorization:Token xxx
    'JWT_AUTH_HEADER_PREFIX': 'Token',
}



GEOIP_PATH = os.path.join(BASE_DIR, "GeoLite2-City.mmdb")


#stuff required for django-channels
ASGI_APPLICATION = "influence.routing.application"
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('localhost', 6379)], #TODO - changed for docker
        },
    },
}

#stuff required for caching
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://0.0.0.0:6379/1",#TODO changed for docker
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient"
        },
    }
}


# THUMBNAIL_KVSTORE = 'sorl.thumbnail.kvstores.redis_kvstore.KVStore'

# Cache time to live is 5 hours.
CACHE_TTL = 60 * 60 * 24

# CELERY STUFF
CELERY_BROKER_URL='redis://0.0.0.0:6379/0' #TODO both lines changed for docker
CELERY_RESULT_BACKEND = 'redis://0.0.0.0:6379/0'
CELERY_ACCEPT_CONTENT = ['application/json', 'pickle']
CELERY_TASK_SERIALIZER = 'pickle'
CELERY_RESULT_SERIALIZER = 'json'
# CELERY_TIMEZONE = 'Africa/Nairobi'
CELERY_ENABLE_UTC = True


#Getstream credentials
STREAM_API_KEY = 'z92y85wanjxs'
STREAM_API_SECRET = 'cetqe7gf26pzuv7nmxdkg3qym444ktdwr57z6ru9czrypcfbd2h94src3rjn54ts'

DEBUG_TOOLBAR_CONFIG = {
    "SHOW_TOOLBAR_CALLBACK": lambda request: True,
}

DEBUG_TOOLBAR_PANELS = [
    'ddt_request_history.panels.request_history.RequestHistoryPanel',  # Here it is
    'debug_toolbar.panels.versions.VersionsPanel',
    'debug_toolbar.panels.timer.TimerPanel',
    'debug_toolbar.panels.settings.SettingsPanel',
    'debug_toolbar.panels.headers.HeadersPanel',
    'debug_toolbar.panels.request.RequestPanel',
    'debug_toolbar.panels.sql.SQLPanel',
    'debug_toolbar.panels.staticfiles.StaticFilesPanel',
    'debug_toolbar.panels.templates.TemplatesPanel',
    'debug_toolbar.panels.cache.CachePanel',
    'debug_toolbar.panels.signals.SignalsPanel',
    'debug_toolbar.panels.logging.LoggingPanel',
    'debug_toolbar.panels.redirects.RedirectsPanel',
    'debug_toolbar.panels.profiling.ProfilingPanel',
]

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'WARNING',
    },
}   

#For firebase cloud messaging
FCM_DJANGO_SETTINGS = {
        "FCM_SERVER_KEY": "AAAAcXcYYQw:APA91bGPVq3EIAc3rQd8SdrCQikl8vGFCRzZutSlX9Q8TPv_d2aUxNiTT34stBu5CSM5u8AIPPpHvfJDlnmYP17c2HR65nqZKQ_LLWGhLNIfNDjYn-n3Xx1XdQb2dRpA3uqXVodsHQvP"
}