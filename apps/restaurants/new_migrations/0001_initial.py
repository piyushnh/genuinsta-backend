# Generated by Django 2.1.7 on 2019-08-20 10:41

from django.conf import settings
import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('paytm', '0009_auto_20190819_0148'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='FoodCourt',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('address', models.CharField(max_length=100, null=True)),
                ('cover_pic', models.ImageField(upload_to='media/foodcourt_pics')),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, null=True, srid=4326, verbose_name='longitude/latitude')),
                ('phone_number', models.CharField(max_length=10)),
                ('website_url', models.URLField(default='', max_length=100)),
                ('city', models.CharField(default='Banglore', max_length=50)),
            ],
            managers=[
                ('gis', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Menu',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=24, unique=True, verbose_name='menu name')),
                ('slug', models.SlugField(help_text='The slug is the URL friendly version of the menu name, so that this can be accessed at a URL like mysite.com/menus/dinner/.', max_length=24, unique=True)),
                ('additional_text', models.CharField(blank=True, help_text='Any additional text that the menu might need, i.e. Served between 11:00am and 4:00pm.', max_length=128, null=True)),
                ('order', models.PositiveSmallIntegerField(default=0, help_text='The order of the menu determines where this menu appears alongside other menus.')),
            ],
            options={
                'verbose_name': 'menu',
                'verbose_name_plural': 'menu',
            },
        ),
        migrations.CreateModel(
            name='MenuCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, verbose_name='menu category name')),
                ('additional_text', models.CharField(blank=True, help_text="The additional text is any bit of related information to go along with a menu category, i.e. the 'Pasta' category might have details that say 'All entrees come with salad and bread'.", max_length=128, null=True)),
                ('order', models.IntegerField(default=0, help_text='The order is the order that this category should appear in when rendered on the templates.')),
                ('menu', models.ForeignKey(help_text="The menus that this category belongs to, i.e. 'Lunch'.", on_delete=django.db.models.deletion.CASCADE, related_name='categories', to='restaurants.Menu')),
            ],
            options={
                'verbose_name': 'menu category',
                'verbose_name_plural': 'menu categories',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='MenuItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the item on the menu.', max_length=48)),
                ('description', models.CharField(blank=True, help_text='The description is a simple text description of the menu item.', max_length=128, null=True)),
                ('order', models.IntegerField(default=0, help_text='The order is to specify the order in which items show up on the menu.', verbose_name='order')),
                ('price', models.IntegerField(help_text='The price is the cost of the item.')),
                ('image', models.ImageField(blank=True, help_text='The image is an optional field that is associated with each menu item.', null=True, upload_to='media/menu_item_pics', verbose_name='image')),
                ('classification', models.CharField(choices=[('non-vegetarian', 'Non-Vegetarian'), ('vegan', 'Vegan'), ('vegetarian', 'Vegetarian')], default=0, help_text='Select if this item classifies as Vegetarian, Vegan, or Neither.', max_length=20, verbose_name='classification')),
                ('spicy', models.BooleanField(default=False, help_text='Is this item spicy?', verbose_name='spicy?')),
                ('contains_peanuts', models.BooleanField(default=True, help_text='Does this item contain peanuts?', verbose_name='contain peanuts?')),
                ('gluten_free', models.BooleanField(default=False, help_text='Is this item Gluten Free?', verbose_name='gluten free?')),
                ('popular', models.BooleanField(default=False, help_text='Is this item popular?', verbose_name='Popular?')),
                ('category', models.ManyToManyField(help_text="Category is the menu category that this menu item belongs to, i.e. 'Appetizers'.", related_name='items', to='restaurants.MenuCategory', verbose_name='menu category')),
            ],
            options={
                'verbose_name': 'menu item',
                'verbose_name_plural': 'menu items',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('order_id', models.CharField(max_length=15, primary_key=True, serialize=False)),
                ('amount', models.IntegerField(default=0, verbose_name='amount')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to=settings.AUTH_USER_MODEL)),
                ('items', models.ManyToManyField(related_name='orders', to='restaurants.MenuItem')),
            ],
        ),
        migrations.CreateModel(
            name='Quantity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField(default=0)),
                ('order', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='quantities', to='restaurants.Order')),
            ],
        ),
        migrations.CreateModel(
            name='Ratings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(default=0, validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(0)])),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Restaurant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('address', models.CharField(max_length=100, null=True)),
                ('cover_pic', models.ImageField(upload_to='media/restaurant_pics')),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, null=True, srid=4326, verbose_name='longitude/latitude')),
                ('phone_number', models.CharField(max_length=10)),
                ('website_url', models.URLField(default='', max_length=100)),
                ('city', models.CharField(default='Banglore', max_length=50)),
                ('foodcourt', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='restaurants', to='restaurants.FoodCourt')),
                ('paytm_merchant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='restaurants', to='paytm.MerchantProfile')),
            ],
            managers=[
                ('gis', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('review', models.CharField(max_length=10000)),
                ('restaurant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review', to='restaurants.Restaurant')),
                ('writer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='ratings',
            name='restaurant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rating', to='restaurants.Restaurant'),
        ),
        migrations.AddField(
            model_name='order',
            name='restaurant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='restaurants.Restaurant'),
        ),
        migrations.AddField(
            model_name='menu',
            name='restaurant',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='menu', to='restaurants.Restaurant'),
        ),
    ]
